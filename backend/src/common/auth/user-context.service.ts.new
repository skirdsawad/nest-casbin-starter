import { Injectable, Scope, Inject } from '@nestjs/common';
import { REQUEST } from '@nestjs/core';
import { Request } from 'express';
import { UsersService } from '../../users/users.service';
import { User } from '../../users/user.entity';

@Injectable({ scope: Scope.REQUEST })
export class UserContext {
  private _user: User | null = null;

  constructor(
    @Inject(REQUEST) private readonly request: Request,
    private readonly usersService: UsersService,
  ) {}

  async getUserId(): Promise<string> {
    const user = await this.getUser();
    return user ? user.id : 'anonymous';
  }

  async getUser(): Promise<User | null> {
    if (this._user) {
      return this._user;
    }

    // In tests, supply x-user-email header. In prod, replace with JWT.
    const userEmail = (this.request.headers['x-user-email'] as string) || 'user_hd_a@example.com';
    if (userEmail) {
      this._user = await this.usersService.findByEmail(userEmail);
    }
    return this._user;
  }
}
